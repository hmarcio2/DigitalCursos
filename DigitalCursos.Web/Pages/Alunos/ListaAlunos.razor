@page "/alunos"
@inject IAlunoService alunoService

<h3>Alunos</h3>
<br />

<div>
    <a href="aluno/create" class="btn btn-outline-secondary">Criar Novo Aluno</a>
</div>

<div class=" d-block d-flex" style="float:right; width:40%;">
    <div class="col-sm-5 mx-2" sytle="float:left">
        <input class="form-control" type="text" placeholder="Filtrar por nome" @bind-value=SearchString />                
    </div>    
    <div>
        <button type="submit" class="btn btn-default btn-info" @onclick=FilterAluno> Filtrar</button>
    </div>
</div>
<br/>

@if(Alunos == null)
{
    <p>Sem dados cadastrados</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nome</th>
                <th>Email</th>                
            </tr>
        </thead>
        <tbody>
            @foreach(var aluno in Alunos)
            {
                <tr>
                    <td>@aluno.AlunoId</td>
                    <td>@aluno.Nome</td>
                    <td>@aluno.Email</td>
                    <td>
                        <a href="/aluno/edit/@aluno.AlunoId" class="btn btn-success">Editar</a>
                        <a class="btn btn-danger" @onclick="(()=> DeletarAluno(aluno.AlunoId))">Deletar</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<ModalConfirma @ref="confirma" onCancela="CancelaConfirma" onConfirma="DeletaConfirma">
    <div> Deseja realmente excluir este aluno? </div>
</ModalConfirma>

@code {
    public IEnumerable<Aluno> Alunos { get; set; }

    ModalConfirma confirma;
    int codigoAluno;
    public string SearchString { get; set; }

    protected async Task FilterAluno()
    {
        await GetAlunos();
        if (SearchString != "")
        {
            Alunos = Alunos.Where(x => x.Nome.ToLower()
                                        .Contains(SearchString.ToLower()))
                                        .ToList();
        }
        SearchString = "";
    }


    protected async override Task OnInitializedAsync()
    {
        await GetAlunos();
    }
    protected async Task GetAlunos()
    {        
        Alunos = await alunoService.GetAlunos();
    }

    protected void DeletarAluno(int alunoId)
    {
        confirma.Exibir();
        codigoAluno = alunoId;               
    }

    void CancelaConfirma()
    {
        confirma.Ocultar();
    }

    async Task DeletaConfirma()
    {
        await alunoService.DeleteAluno(codigoAluno);
        confirma.Ocultar();
        await GetAlunos();
    }

    
}